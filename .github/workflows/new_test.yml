name: Kernel kyr0SU for Alioth (N0kernel_kernel+KernelSU+ZyC Clang)

on: 
  schedule:
    - cron:  '0 8 * * *'
  workflow_dispatch:

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Setup build kernel environment
      run: |
        sudo apt-get update
        sudo apt-get install libncurses-dev libtinfo5 git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: Checkout Kernel Source Code
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: EmanuelCN/kernel_xiaomi_sm8250
        ref: staging
        path: android-kernel
        
    - name: Checkout AnyKernel
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: kyr0-4/kyr0SU
        ref: main
        path: anykernel

    - name: Download Compiler - ZyCromerZ
      run: |
        mkdir clang
        wget https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt
        LINK=$(cat 'Clang-main-link.txt')
        wget -q ${LINK} -O clang.tar.gz
        tar -C clang/ -zxf clang.tar.gz

    - name: Variables
      run: |
        echo "KERNEL_DIR=$GITHUB_WORKSPACE/android-kernel" >> $GITHUB_ENV
        echo "CLANG_DIR=$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_ENV
        echo "GCC_ARM64_DIR=$GITHUB_WORKSPACE/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin" >> $GITHUB_ENV
        echo "GCC_ARM_DIR=$GITHUB_WORKSPACE/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-linux-gnueabihf/bin" >> $GITHUB_ENV
        echo "ZIMAGE_DIR=$GITHUB_WORKSPACE/android-kernel/out/arch/arm64/boot" >> $GITHUB_ENV
        echo "ANYKERNEL_DIR=$GITHUB_WORKSPACE/anykernel/anykernel" >> $GITHUB_ENV
        export ARCH=arm64
        export SUBARCH=arm64
        TIME=$(TZ=America/Mexico_City date "+%Y%m%d%H%M")
        DEVICE=alioth
        ZIPNAME=Kyr0SU
        echo "FINAL_ZIP=${ZIPNAME}-N0kernel-${DEVICE}-KERNEL-AOSP-${TIME}" >> $GITHUB_ENV
        sed -i 's/CONFIG_LOCALVERSION="-N0kernel"/CONFIG_LOCALVERSION="-Kyr0SU-EmanuelCN"/g' "android-kernel/arch/arm64/configs/vendor/alioth_defconfig"

    - name: Apply KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        wget -q "https://raw.githubusercontent.com/CHIZI-0618/RK-KernelSU_Action/main/KernelSU.patch" -O KernelSU.patch
        git apply ./KernelSU.patch

    - name: Build kernel
      run: |
        cd android-kernel
        KERNEL_DEFCONFIG=vendor/alioth_defconfig
        ARCH=arm64
        SUBARCH=arm64
        make O=out ARCH=arm64 clean
        make O=out ARCH=arm64 CC=${{ env.CLANG_DIR }}/clang $KERNEL_DEFCONFIG
        scripts/config --file out/.config \
                      -d CONFIG_CGROUP_DEBUG \
                      -d CONFIG_CMA_DEBUGFS \
                      -d CONFIG_PM_DEBUG \
                      -d CONFIG_DEBUG_PAGEALLOC \
                      -d CONFIG_SLUB_DEBUG_PANIC_ON \
                      -d CONFIG_DEBUG_PAGEALLOC_ENABLE_DEFAULT \
                      -d CONFIG_DEBUG_OBJECTS \
                      -d CONFIG_DEBUG_OBJECTS_FREE \
                      -d CONFIG_DEBUG_OBJECTS_TIMERS \
                      -d CONFIG_DEBUG_OBJECTS_WORK \
                      -d CONFIG_DEBUG_OBJECTS_PERCPU_COUNTER \
                      -d CONFIG_DEBUG_KMEMLEAK \
                      -d CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF \
                      -d CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE \
                      -d CONFIG_DEBUG_STACK_USAGE \
                      -d CONFIG_DEBUG_SPINLOCK \
                      -d CONFIG_DEBUG_MUTEXES \
                      -d CONFIG_DEBUG_ATOMIC_SLEEP \
                      -d CONFIG_DEBUG_SG \
                      -d CONFIG_DEBUG_NOTIFIERS \
                      -d CONFIG_DEBUG_CREDENTIALS \
                      -d CONFIG_LOCK_TORTURE_TEST \
                      -d CONFIG_RCU_TORTURE_TEST \
                      -d CONFIG_FAULT_INJECTION \
                      -d CONFIG_FAIL_PAGE_ALLOC \
                      -d CONFIG_FAULT_INJECTION_STACKTRACE_FILTER \
                      -d CONFIG_DEBUG_SECTION_MISMATCH \
                      -d CONFIG_DEBUG_MEMORY_INIT \
                      -d CONFIG_RMNET_DATA_DEBUG_PKT \
                      -d CONFIG_ESOC_DEBUG \
                      -d CONFIG_FHANDLE \
                      -d CONFIG_RD_BZIP2 \
                      -d CONFIG_RD_LZMA \
                      -d CONFIG_SYSFS_SYSCALL \
                      -d CONFIG_SLAB_FREELIST_RANDOM \
                      -d CONFIG_SLAB_FREELIST_HARDENED \
                      -d CONFIG_CMA_DEBUGFS \
                      -e CONFIG_HARDEN_BRANCH_PREDICTOR \
                      -d CONFIG_EFI \
                      -d CONFIG_L2TP_DEBUGFS \
                      -d CONFIG_REGMAP_ALLOW_WRITE_DEBUGFS \
                      -d CONFIG_CORESIGHT \
                      -d CONFIG_PAGE_POISONING \
                      -d CONFIG_QCOM_RTB \
                      -d CONFIG_BLK_DEV_IO_TRACE \
                      -d CONFIG_PREEMPTIRQ_EVENTS \
                      -d CONFIG_PREEMPT_TRACER \
                      -d CONFIG_IRQSOFF_TRACER \
                      -d CONFIG_PAGE_OWNER \
                      -d CONFIG_DRM_SDE_EVTLOG_DEBUG \
                      -d CONFIG_DRM_MSM_REGISTER_LOGGING \
                      -d CONFIG_MSM_SDE_ROTATOR_EVTLOG_DEBUG \
                      -d CONFIG_VIDEO_ADV_DEBUG \
                      -d CONFIG_IPU_DEBUG \
                      -d CONFIG_SPMI_MSM_PMIC_ARB_DEBUG \
                      -d CONFIG_WQ_WATCHDOG \
                      -d CONFIG_SCHED_STACK_END_CHECK \
                      -d CONFIG_LOCKUP_DETECTOR \
                      -d CONFIG_SOFTLOCKUP_DETECTOR \
                      -d CONFIG_MHI_DEBUG \
                      -d CONFIG_PANIC_ON_SCHED_BUG \
                      -d CONFIG_PANIC_ON_RT_THROTTLING \
                      -d CONFIG_PANIC_ON_REFCOUNT_ERROR \
                      -d CONFIG_EDAC_KRYO_ARM64_PANIC_ON_UE \
                      -d CONFIG_EDAC_QCOM_LLCC_PANIC_ON_UE \
        make -j$(nproc --all) \
                      O=out \
                      ARCH=arm64 \
                      CC=${{ env.CLANG_DIR }}/clang \
                      CLANG_TRIPLE=${{ env.CLANG_DIR }}/aarch64-linux-gnu- \
                      CROSS_COMPILE=${{ env.CLANG_DIR }}/aarch64-linux-gnu- \
                      CROSS_COMPILE_COMPAT=${{ env.CLANG_DIR }}/arm-linux-gnueabi- \
                      LD=${{ env.CLANG_DIR }}/ld.lld \
                      AR=${{ env.CLANG_DIR }}/llvm-ar \
                      NM=${{ env.CLANG_DIR }}/llvm-nm \
                      STRIP=${{ env.CLANG_DIR }}/llvm-strip \
                      OBJCOPY=${{ env.CLANG_DIR }}/llvm-objcopy \
                      OBJDUMP=${{ env.CLANG_DIR }}/llvm-objdump \
                      READELF=${{ env.CLANG_DIR }}/llvm-readelf \
                      HOSTCC=${{ env.CLANG_DIR }}/clang \
                      HOSTCXX=${{ env.CLANG_DIR }}/clang++ \
                      HOSTAR=${{ env.CLANG_DIR }}/llvm-ar \
                      HOSTLD=${{ env.CLANG_DIR }}/ld.lld \
                      LLVM=1 \
                      LLVM_IAS=1 

    - name: generate dtb
      run: |
        find ${{ env.KERNEL_DIR }}/out/arch/arm64/boot/dts/vendor/qcom -name '*.dtb' -exec cat {} + >${{ env.KERNEL_DIR }}/out/arch/arm64/boot/dtb

    - name: Upload the kernel image
      uses: actions/upload-artifact@v3
      with:
        name: Image.gz
        path: ${{ env.ZIMAGE_DIR }}/Image.gz

    - name: Upload DTBO image
      uses: actions/upload-artifact@v3
      with:
        name: dtbo
        path: ${{ env.ZIMAGE_DIR }}/dtbo.img

    - name: Upload DTB image
      uses: actions/upload-artifact@v3
      with:
        name: dtb
        path: ${{ env.ZIMAGE_DIR }}/dtb

    - name: Make Anykernel for the kernel
      run: |
        cp -fp ${{ env.ZIMAGE_DIR }}/Image.gz ${{ env.ANYKERNEL_DIR }}
        cp -fp ${{ env.ZIMAGE_DIR }}/dtbo.img ${{ env.ANYKERNEL_DIR }}
        cp -fp ${{ env.ZIMAGE_DIR }}/dtb ${{ env.ANYKERNEL_DIR }}
        
    - name: Upload AnyKernel zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FINAL_ZIP}}
        path: ${{ env.ANYKERNEL_DIR }}
