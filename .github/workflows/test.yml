name: Build Kernel kyr0SU for Alioth (EmanuelCN_kernel+KernelSU+Snapdragon LLVM 16.0.3)

on:
  workflow_dispatch:

    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'EmanuelCN/kernel_xiaomi_sm8250'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'staging'
      TARGET_ARCH:
        description: 'Target ARCH'
        required: true
        default: 'arm64'
      KERNEL_FILE:
        description: 'Your kernel out image name'
        required: true
        default: 'Image.gz-dtb'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "TARGET_ARCH=${{ github.event.inputs.TARGET_ARCH }}" >> $GITHUB_ENV
        echo "KERNEL_FILE=${{ github.event.inputs.KERNEL_FILE }}" >> $GITHUB_ENV

    - name: Setup build kernel environment
      run: |
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl libncurses5 zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
    
    - name: Checkout Kernel Source
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        submodules: recursive
        path: android-kernel
        
    - name: Fix:Makefile:Properly disable Unknown Warning Option
      run: |
        cd android-kernel
        sed -i 's/CLANG_FLAGS	+= -Werror=unknown-warning-option/CLANG_FLAGS	+= -Werror=unknown-warning-option -Wno-unknown-warning-option/g' "Makefile"
    
    - name: Download Clang Toolchain
      run: |
        mkdir clang
        cd clang
        git clone --depth=1 --branch thirteen https://github.com/PixelExperience/prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git gcc-arm64
        cd ./gcc-arm64
        GCC_ARM64_DIR=`pwd`
        echo "GCC_ARM64_DIR=$GCC_ARM64_DIR" >> $GITHUB_ENV
        cd ..
        git clone --depth=1 --branch thirteen https://github.com/PixelExperience/prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git gcc-arm
        cd ./gcc-arm
        GCC_ARM_DIR=`pwd`
        echo "GCC_ARM_DIR=$GCC_ARM_DIR" >> $GITHUB_ENV
        cd ..
        git clone --depth=1 https://gitlab.com/VoidUI/snapdragon-clang.git
        cd ./snapdragon-clang
        CLANG_DIR=`pwd`
        echo "CLANG_DIR=$CLANG_DIR" >> $GITHUB_ENV
        
    - name: Setup KernelSU
      run: |
        cd android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        wget -q "https://raw.githubusercontent.com/CHIZI-0618/RK-KernelSU_Action/main/KernelSU.patch" -O KernelSU.patch
        git apply ./KernelSU.patch
        
    - name: Download anykernel
      run: |
        cd android-kernel
        git clone https://github.com/kyr0-4/kyr0SU.git anykernel
        cd ./anykernel/anykernel
        ANYKERNEL_DIR=`pwd`
        echo "ANYKERNEL_DIR=$ANYKERNEL_DIR" >> $GITHUB_ENV

    - name: Build kernel
      run: |
        cd android-kernel
        KERNEL_DEFCONFIG=vendor/alioth_defconfig
        KERNEL_DIR=`pwd`
        echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
        echo "ZIMAGE_DIR="${KERNEL_DIR}/out/arch/arm64/boot"" >> $GITHUB_ENV
        ARCH=arm64
        SUBARCH=arm64
        cd $KERNEL_DIR
        make O=out ARCH=arm64 CC=${{ env.CLANG_DIR }}/bin/clang $KERNEL_DEFCONFIG
        make -j$(nproc --all) \
                      O=out \
                      ARCH=arm64 \
                      CC=${{ env.CLANG_DIR }}/bin/clang \
                      CLANG_TRIPLE=${{ env.GCC_ARM64_DIR }}/bin/aarch64-linux-gnu- \
                      CROSS_COMPILE=${{ env.GCC_ARM64_DIR }}/bin/aarch64-linux-android- \
                      CROSS_COMPILE_ARM32=${{ env.GCC_ARM_DIR }}/bin/arm-linux-androideabi- \
                      LD=${{ env.CLANG_DIR }}/bin/ld.lld \
                      AR=${{ env.CLANG_DIR }}/bin/llvm-ar \
                      NM=${{ env.CLANG_DIR }}/bin/llvm-nm \
                      STRIP=${{ env.CLANG_DIR }}/bin/llvm-strip \
                      OBJCOPY=${{ env.CLANG_DIR }}/bin/llvm-objcopy \
                      OBJDUMP=${{ env.CLANG_DIR }}/bin/llvm-objdump \
                      READELF=${{ env.CLANG_DIR }}/bin/llvm-readelf \
                      HOSTCXX=${{ env.CLANG_DIR }}/bin/clang++
                      HOSTAR=${{ env.CLANG_DIR }}/bin/llvm-ar
                      HOSTLD=${{ env.CLANG_DIR }}/bin/ld.lld
                      HOSTCC=${{ env.CLANG_DIR }}/bin/clang \
                      LLVM=1 \
                      LLVM_IAS=1 \
                      HOSTCFLAGS="-fuse-ld=lld -Wno-unused-command-line-argument"
    
    - name: Upload the kernel image
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_FILE }}
        path: android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }}

    - name: Upload DTBO image
      uses: actions/upload-artifact@v3
      with:
        name: dtbo
        path: android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/dtbo.img

    - name: Make Anykernel for the kernel
      run: |
        cd android-kernel
		    find ${KERNEL_DIR}/out/arch/arm64/boot/dts/vendor/qcom -name '*.dtb' -exec cat {} + >${KERNEL_DIR}/out/arch/arm64/boot/dtb
        TIME=$(TZ=America/Mexico_City date "+%Y%m%d%H%M")
        echo "FINAL_ZINAME="Kyr0SU-AOSP-${TIME}"" >> $GITHUB_ENV
        cp -fp ${{ env.ZIMAGE_DIR }}/Image.gz ${{ env.ANYKERNEL_DIR }}
        cp -fp ${{ env.ZIMAGE_DIR }}/dtbo.img ${{ env.ANYKERNEL_DIR }}
        cp -fp ${{ env.ZIMAGE_DIR }}/dtb ${{ env.ANYKERNEL_DIR }}

    - name: Upload AnyKernel zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FINAL_ZINAME}}
        path: ${{ env.ANYKERNEL_DIR }}
